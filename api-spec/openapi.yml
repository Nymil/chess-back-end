openapi: 3.0.3
info:
  title: 'Multiplayer chess api'
  description: 'Allows you to play chess using an api which for example can be used in an html js css client.'
  version: 0.0.1
servers:
  - url: http://localhost:8080/
    description: 'Local API'
paths:
  /api/hello-world:
    get:
      description: simple endpoint to test deployment
      operationId: helloWorld
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/helloWorld'
  /api/games/create:
    post:
      description: create a game which can be joined by another player
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userNameObject'
      responses:
        '201':
          description: game created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidObject'
  /api/games/{gameId}/join:
    put:
      description: join an already existing game
      operationId: joinGame
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
          example: 3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userNameObject'
      responses:
        '201':
          description: game joined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uuidObject'
  /api/games:
    get:
      description: get all games
      operationId: getGames
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      $ref: "#/components/schemas/simpleGameObject"
  /api/games/{gameId}:
    get:
      description: get details of a single game
      operationId: getGame
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
          example: 3
        - in: header
          name: uuid
          required: true
          description: required to validate whether the user has access to the information of the game
          schema:
            type: string
          example: 39fd82fe-8a07-4cef-b86e-a183730f1a51
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gameDetails"

components:
  schemas:
    helloWorld:
      type: object
      properties:
        response:
          type: string
          example: "Hello World!"
    uuidObject:
      type: object
      properties:
        uuid:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
    userNameObject:
      type: object
      properties:
        userName:
          type: string
          example: "Alice"
    simpleGameObject:
      type: object
      properties:
        gameId:
          type: integer
          example: 3
        name:
          type: string
          example: Alice's game
        started:
          type: boolean
          example: true
    gameDetails:
      type: object
      properties:
        gameId:
          type: integer
          example: 2
        currentPlayer:
          type: string
          example: "Alice"
        started:
          type: boolean
          example: false
        playerWhite:
          type: string
          example: "Alice"
        playerBlack:
          type: string
          example: "bob"
        board:
          type: object
          description: object with keys which are a location (like "a2") and values which are the pieces on that location"
          example: {a1: white knight, b2: black queen}
        capturedPieces:
          type: array
          items:
            type: string
            example: black rook